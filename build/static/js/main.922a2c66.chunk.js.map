{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargerRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.922a2c66.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance=axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n})\r\nexport default instance;\r\n//import axios from \"axios\";\r\n//const BASE_URL = \"https://api.themoviedb.org/3\";\r\n//const instance = axios.create({ baseURL: BASE_URL });","import React,{useState,useEffect}from 'react';\r\nimport axios from \"./axios\";\r\nimport './Row.css';\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\nconst base_url =\"http://image.tmdb.org/t/p/w342/\";\r\n\r\nfunction Row({title,fetchUrl,isLargerRow}) {\r\n    const[movies,setMovies]=useState([]);\r\n    const[trailerUrl,setTrailerUrl]=useState(\"\");\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request= await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[fetchUrl]);\r\n    //console.log(movies);\r\n    const opts={\r\n        height:\"390\",\r\n        width:\"100%\",\r\n        playerVars:{\r\n //https://developers.google.com/youtube/player_parameters\r\n            autoplay:1,\r\n        },\r\n        };\r\n        const handleClick=(movie)=>{\r\n            if(trailerUrl){\r\n                setTrailerUrl('');\r\n            } else{\r\n                movieTrailer(movie?.name||\"\")\r\n                .then((url)=>{\r\n                   // https://www.youtube.com/watch?v=XtMThy8QKqU\r\n                    const urlParams=new URLSearchParams(new URL(url).search);\r\n                   setTrailerUrl(urlParams.get(\"v\"));\r\n\r\n                })\r\n                .catch((error)=>console.log(error));\r\n            }\r\n        }\r\n    \r\n    return (\r\n        <div className=\"row\">\r\n         <h2>{title}</h2> \r\n         <div className=\"row_posters\">\r\n            {/*several row_poster(s)*/  }\r\n            {movies.map((movie) =>(\r\n                <img\r\n                key={movie.id}\r\n                onClick={()=>handleClick(movie)}\r\n                 className={`row_poster ${isLargerRow && \"row_posterLarge\"}`}\r\n                 src={`${base_url}${isLargerRow ? movie.poster_path:movie.backdrop_path}`}\r\n                  alt={movie.name}/>\r\n            ))}\r\n        </div>\r\n        {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/> \r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY=\"6355c03bff0e0612a0bb54516395b4be\";\r\nconst requests={\r\n fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n fetchActionMovies:`/discover/tv?api_key=${API_KEY}&with_genres=28`,\r\n fetchComedyMovies:`/discover/tv?api_key=${API_KEY}&with_genres=35`,\r\n fetchHorrorMovies:`/discover/tv?api_key=${API_KEY}&with_genres=27`,\r\n fetchRomanceMovies:`/discover/tv?api_key=${API_KEY}&with_genres=10749`,\r\n fetchDocumentries:`/discover/tv?api_key=${API_KEY}&with_genres=99`,\r\n\r\n }\r\n\r\nexport default requests;\r\n","import React,{useState,useEffect}from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n    const[movie,setMovie]=useState([]);\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const request=await axios.get(requests.fetchNetflixOriginals)\r\n\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random()*request.data.results.length-1)\r\n                ]\r\n            );\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n\r\n    },[]);\r\n    \r\n\r\nfunction truncate (str,n) {\r\n    return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n}\r\n    return (\r\n      <header className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")` ,\r\n        backgroundPosition:\"center center\"\r\n      }}\r\n      >\r\n      <div className=\"banner_contents\">\r\n      {/*title*/}\r\n      <h1 className=\"bannner_title\">\r\n          {movie?.title||movie?.name||movie?.original_name}\r\n      </h1>\r\n      <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List</button>\r\n      </div>\r\n<h1 className=\"banner_description\"\r\n >\r\n  {truncate(movie?.overview,150)}\r\n  </h1>\r\n\r\n\r\n      </div>\r\n          {/*title*/}\r\n          <div className=\"banner--fadeBottom\"/>\r\n\r\n      </header>\r\n            \r\n        \r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React ,{useState,useEffect}from 'react'\r\nimport './Nav.css'\r\n\r\n\r\nfunction Nav() {\r\n    const[show,handleShow]=useState(false);\r\n    useEffect(()=>{\r\n        window.addEventListener('scroll', ()=> {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n        return()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n             \r\n\r\n    },[]);\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img\r\n            className=\"nav_logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\r\n            alt=\"Netflix Logo\"/>\r\n            <img\r\n            className=\"nav_avatar\"\r\n            src=\"https://i.pinimg.com/564x/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.jpg\"\r\n            alt=\"Netflix Logo\"/>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n    <Nav/>\n    <Banner/>\n\n    <Row title=\"NETFLIX ORGINALS\" \n    fetchUrl={requests.fetchNetflixOriginals}\n      isLargerRow={true}\n    />\n    <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n    <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n    <Row title=\"Action Movies\" fetchUrl={requests.fetchTopRated}/>\n    <Row title=\"Comedy Movies\"fetchUrl={requests.fetchComedyMovies}/>\n    <Row title=\"Horror Movies\"fetchUrl={requests.fetchHorrorMovies}/>\n    <Row title=\"Romance Movies\"fetchUrl={requests.fetchRomanceMovies}/>\n    <Row title=\"Documentaries\"fetchUrl={requests.fetchDocumentries}/>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}